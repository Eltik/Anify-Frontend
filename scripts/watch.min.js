(function(_0x211425, _0x599c0b) {
    const _0x4a4fca = _0xdaff,
        _0x55b796 = _0x211425();
    while (!![]) {
        try {
            const _0x43a801 = parseInt(_0x4a4fca(0x120)) / 0x1 * (-parseInt(_0x4a4fca(0x11d)) / 0x2) + parseInt(_0x4a4fca(0x121)) / 0x3 * (parseInt(_0x4a4fca(0x11b)) / 0x4) + -parseInt(_0x4a4fca(0x134)) / 0x5 * (parseInt(_0x4a4fca(0x124)) / 0x6) + parseInt(_0x4a4fca(0x110)) / 0x7 + -parseInt(_0x4a4fca(0x119)) / 0x8 * (parseInt(_0x4a4fca(0x115)) / 0x9) + parseInt(_0x4a4fca(0x113)) / 0xa + parseInt(_0x4a4fca(0x13d)) / 0xb * (parseInt(_0x4a4fca(0x12c)) / 0xc);
            if (_0x43a801 === _0x599c0b) break;
            else _0x55b796['push'](_0x55b796['shift']());
        } catch (_0x395310) {
            _0x55b796['push'](_0x55b796['shift']());
        }
    }
}(_0x5063, 0x69a34));

function load(_0x317176, _0x30e019, _0x176180) {
    const _0x46c354 = _0xdaff;
    _0x176180 = decrypt(_0x176180), fetch(api_server + _0x46c354(0x12b), {
        'method': _0x46c354(0x13b),
        'body': JSON['stringify']({
            'id': _0x317176
        }),
        'headers': {
            'Content-Type': _0x46c354(0x129)
        }
    })[_0x46c354(0x117)](async _0x4c0ac4 => {
        const _0x359ac3 = await _0x4c0ac4['json']();
        episodeCovers = _0x359ac3;
    })['catch'](_0x3110b9 => {
        return null;
    });
    const _0x29475e = {
        'id': _0x317176,
        'provider': _0x30e019,
        'watchId': _0x176180
    };
    fetch(api_server + _0x46c354(0x11f), {
        'method': 'POST',
        'body': JSON[_0x46c354(0x128)](_0x29475e),
        'headers': {
            'Content-Type': 'application/json'
        }
    })[_0x46c354(0x117)](async _0x4f1715 => {
        const _0x4fe110 = _0x46c354;
        let _0x4c486a = await _0x4f1715['json']();
        if (_0x4c486a['error']) return;
        sources = _0x4c486a[_0x4fe110(0x133)], sources['map'](_0x2b2985 => {
            const _0x4be16e = _0x4fe110;
            _0x2b2985['isM3U8'] && (_0x2b2985[_0x4be16e(0x137)] = _0x4be16e(0x130) + _0x2b2985[_0x4be16e(0x137)]);
        }), subtitles = _0x4c486a[_0x4fe110(0x122)], intro = _0x4c486a['intro'];
        sources[_0x4fe110(0x139)] === 0x0 && alert(_0x4fe110(0x125));
        const _0x1f4343 = {
            'id': _0x317176
        };
        fetch(api_server + '/episodes', {
            'method': _0x4fe110(0x13b),
            'body': JSON['stringify'](_0x1f4343),
            'headers': {
                'Content-Type': _0x4fe110(0x129)
            }
        })[_0x4fe110(0x117)](async _0x6143b7 => {
            const _0x8d7a9c = _0x4fe110,
                _0x15bcb1 = await _0x6143b7[_0x8d7a9c(0x127)]();
            episodes = _0x15bcb1;
            let _0x297078 = -0x1;
            for (let _0x4dd86c = 0x0; _0x4dd86c < episodes[_0x8d7a9c(0x139)]; _0x4dd86c++) {
                const _0x3a23bf = episodes[_0x4dd86c];
                for (let _0x19d874 = 0x0; _0x19d874 < _0x3a23bf[_0x8d7a9c(0x136)][_0x8d7a9c(0x139)]; _0x19d874++) {
                    const _0x18a2c4 = _0x3a23bf[_0x8d7a9c(0x136)][_0x19d874];
                    if (_0x18a2c4?.['id'] === _0x176180 || _0x18a2c4?.['url'] === _0x176180) {
                        _0x297078 = _0x18a2c4[_0x8d7a9c(0x13e)] ?? _0x4dd86c;
                        break;
                    }
                }
            }
            _0x297078 != -0x1 && intro[_0x8d7a9c(0x135)] === 0x0 && fetch(api_server + '/skip_times', {
                'method': _0x8d7a9c(0x13b),
                'body': JSON[_0x8d7a9c(0x128)]({
                    'id': _0x317176,
                    'episodeNumber': _0x297078
                }),
                'headers': {
                    'Content-Type': _0x8d7a9c(0x129)
                }
            })[_0x8d7a9c(0x117)](async _0x90a08d => {
                const _0x2123d8 = _0x8d7a9c,
                    _0xe4dfd0 = await _0x90a08d[_0x2123d8(0x127)]();
                if (_0xe4dfd0[_0x2123d8(0x131)] === 0x1f4) {
                    console['log'](_0x2123d8(0x126));
                    return;
                }
                for (let _0x311942 = 0x0; _0x311942 < _0xe4dfd0[_0x2123d8(0x139)]; _0x311942++) {
                    _0xe4dfd0[_0x311942][_0x2123d8(0x12f)] === 'op' && (intro[_0x2123d8(0x11a)] = _0xe4dfd0[_0x311942][_0x2123d8(0x10e)][_0x2123d8(0x10f)], intro['end'] = _0xe4dfd0[_0x311942]['interval'][_0x2123d8(0x118)]);
                }
            })[_0x8d7a9c(0x111)](_0xf8dc78 => {
                const _0x20cf53 = _0x8d7a9c;
                handleError(_0xf8dc78), console[_0x20cf53(0x132)](_0x20cf53(0x126));
            });
            const _0x36d76d = {
                'id': _0x317176
            };
            fetch(api_server + _0x8d7a9c(0x12e), {
                'method': _0x8d7a9c(0x13b),
                'body': JSON[_0x8d7a9c(0x128)](_0x36d76d),
                'headers': {
                    'Content-Type': _0x8d7a9c(0x129)
                }
            })['then'](async _0x1806f0 => {
                const _0x1e1871 = _0x8d7a9c,
                    _0x44ecd3 = await _0x1806f0[_0x1e1871(0x127)]();
                info = _0x44ecd3;
                const _0x47b9d8 = document['createElement'](_0x1e1871(0x114));
                _0x47b9d8[_0x1e1871(0x116)] = '../../../scripts/player.js';
                const _0x13edeb = document[_0x1e1871(0x12d)](_0x1e1871(0x12a));
                _0x13edeb[_0x1e1871(0x123)] = 'stylesheet', _0x13edeb[_0x1e1871(0x112)] = _0x1e1871(0x11e), document[_0x1e1871(0x13a)](_0x1e1871(0x13c))['append'](_0x47b9d8), document[_0x1e1871(0x13a)]('head')[_0x1e1871(0x11c)](_0x13edeb), setTimeout(() => {
                    const _0x575e9d = _0x1e1871;
                    console[_0x575e9d(0x132)](_0x575e9d(0x138)), loadPlayer();
                }, 0x4b0);
            })[_0x8d7a9c(0x111)](_0x300b4d => {
                handleError(_0x300b4d);
            });
        });
    })[_0x46c354(0x111)](_0x9d42bf => {
        handleError(_0x9d42bf);
    });
}

function _0xdaff(_0x46944e, _0x5b456c) {
    const _0x5063f0 = _0x5063();
    return _0xdaff = function(_0xdaff1d, _0x1a5d0b) {
        _0xdaff1d = _0xdaff1d - 0x10e;
        let _0x10ecb2 = _0x5063f0[_0xdaff1d];
        return _0x10ecb2;
    }, _0xdaff(_0x46944e, _0x5b456c);
}

function _0x5063() {
    const _0x33e264 = ['src', 'then', 'endTime', '8lkjzfj', 'start', '62548hgQITX', 'append', '1677340VZRsZS', '../../../styles/player.css', '/sources', '1hNRKkp', '102mQkGUQ', 'subtitles', 'rel', '102ZEdlqX', 'There\x20are\x20no\x20sources\x20available\x20for\x20this\x20connector.\x20Please\x20try\x20a\x20different\x20provider.', 'Unable\x20to\x20fetch\x20skip\x20times.', 'json', 'stringify', 'application/json', 'link', '/episode_covers', '156132Loxgpp', 'createElement', '/info', 'skipType', 'https://proxy.vnxservers.com/', 'statusCode', 'log', 'sources', '212295UWUTXQ', 'end', 'episodes', 'url', 'Loading\x20player...', 'length', 'querySelector', 'POST', 'body', '473lRqWoi', 'number', 'interval', 'startTime', '1646743Svogkf', 'catch', 'href', '7477310wxnLEi', 'script', '728514TTVZmH'];
    _0x5063 = function() {
        return _0x33e264;
    };
    return _0x5063();
}