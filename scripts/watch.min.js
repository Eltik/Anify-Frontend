function _0x5389() {
    const _0xdd2d1d = ['log', '19544170jnodpt', 'Unable\x20to\x20fetch\x20skip\x20times.', 'https://m3u8.eltik.net/m3u8_proxy?url=', 'Loaded\x20player.', 'length', 'link', '1107944cYxAsz', 'map', '6qtBkeW', '/info', 'startTime', 'endTime', 'https://cors.eltik.net/', 'url', '/skip_times', 'POST', '1161KZyHzK', 'catch', '3355175lCiGTt', 'application/json', 'then', 'interval', 'head', 'stylesheet', 'end', 'error', 'subtitles', 'vizcloud', '5660123FvSrta', 'json', 'querySelector', 'stringify', '../../../styles/player.css', '149454kNqTjl', 'statusCode', 'episodes', '2788ndXCSN', '/sources', 'href', 'includes', '8eMTmRc', 'number', 'There\x20are\x20no\x20sources\x20available\x20for\x20this\x20connector.\x20Please\x20try\x20a\x20different\x20provider.', '683772EuxjQK', 'intro', '&headers=', '/episodes', 'Loading\x20player...'];
    _0x5389 = function() {
        return _0xdd2d1d;
    };
    return _0x5389();
}(function(_0x594ebb, _0x3c5efb) {
    const _0x33fad4 = _0x52d0,
        _0x4f10ee = _0x594ebb();
    while (!![]) {
        try {
            const _0x4d4567 = parseInt(_0x33fad4(0x1a9)) / 0x1 + parseInt(_0x33fad4(0x1b5)) / 0x2 + parseInt(_0x33fad4(0x1bf)) / 0x3 * (-parseInt(_0x33fad4(0x1d3)) / 0x4) + -parseInt(_0x33fad4(0x1c1)) / 0x5 * (-parseInt(_0x33fad4(0x1b7)) / 0x6) + parseInt(_0x33fad4(0x1cb)) / 0x7 * (parseInt(_0x33fad4(0x1a6)) / 0x8) + parseInt(_0x33fad4(0x1d0)) / 0x9 + -parseInt(_0x33fad4(0x1af)) / 0xa;
            if (_0x4d4567 === _0x3c5efb) break;
            else _0x4f10ee['push'](_0x4f10ee['shift']());
        } catch (_0x4a1029) {
            _0x4f10ee['push'](_0x4f10ee['shift']());
        }
    }
}(_0x5389, 0x7c77a));

function _0x52d0(_0x3bfdbc, _0xbf37c4) {
    const _0x538941 = _0x5389();
    return _0x52d0 = function(_0x52d094, _0x33e7d6) {
        _0x52d094 = _0x52d094 - 0x1a5;
        let _0x3f8aea = _0x538941[_0x52d094];
        return _0x3f8aea;
    }, _0x52d0(_0x3bfdbc, _0xbf37c4);
}

function load(_0x3368f3, _0x19ae8e, _0x48061) {
    const _0x5ac3e9 = _0x52d0;
    _0x48061 = decrypt(_0x48061), fetch(api_server + '/episode_covers', {
        'method': _0x5ac3e9(0x1be),
        'body': JSON['stringify']({
            'id': _0x3368f3
        }),
        'headers': {
            'Content-Type': 'application/json'
        }
    })[_0x5ac3e9(0x1c3)](async _0x46bc35 => {
        const _0x1a9ecb = await _0x46bc35['json']();
        episodeCovers = _0x1a9ecb;
    })[_0x5ac3e9(0x1c0)](_0x3473ae => {
        return null;
    });
    const _0x95510e = {
        'id': _0x3368f3,
        'provider': _0x19ae8e,
        'watchId': _0x48061
    };
    fetch(api_server + _0x5ac3e9(0x1d4), {
        'method': _0x5ac3e9(0x1be),
        'body': JSON[_0x5ac3e9(0x1ce)](_0x95510e),
        'headers': {
            'Content-Type': _0x5ac3e9(0x1c2)
        }
    })[_0x5ac3e9(0x1c3)](async _0x1e07d4 => {
        const _0xe1ec4 = _0x5ac3e9;
        let _0x1ebb5f = await _0x1e07d4[_0xe1ec4(0x1cc)]();
        if (_0x1ebb5f[_0xe1ec4(0x1c8)]) return;
        sources = _0x1ebb5f['sources'], sources[_0xe1ec4(0x1b6)](_0x4114e2 => {
            const _0x26873d = _0xe1ec4;
            _0x4114e2['isM3U8'] && _0x4114e2['url'][_0x26873d(0x1a5)](_0x26873d(0x1ca)) ? (_0x4114e2['url'] = _0x26873d(0x1b1) + encodeURIComponent(_0x4114e2[_0x26873d(0x1bc)]) + _0x26873d(0x1ab) + encodeURIComponent(JSON[_0x26873d(0x1ce)]({
                'Referer': 'https://9anime.pl'
            })), console[_0x26873d(0x1ae)](_0x4114e2['url'])) : _0x4114e2['isM3U8'] && (_0x4114e2['url'] = _0x26873d(0x1bb) + _0x4114e2[_0x26873d(0x1bc)]);
        }), subtitles = _0x1ebb5f[_0xe1ec4(0x1c9)], intro = _0x1ebb5f[_0xe1ec4(0x1aa)];
        sources[_0xe1ec4(0x1b3)] === 0x0 && alert(_0xe1ec4(0x1a8));
        const _0x2e85e6 = {
            'id': _0x3368f3
        };
        fetch(api_server + _0xe1ec4(0x1ac), {
            'method': _0xe1ec4(0x1be),
            'body': JSON['stringify'](_0x2e85e6),
            'headers': {
                'Content-Type': _0xe1ec4(0x1c2)
            }
        })[_0xe1ec4(0x1c3)](async _0x2037fb => {
            const _0x3ca470 = _0xe1ec4,
                _0x4bdcdb = await _0x2037fb[_0x3ca470(0x1cc)]();
            episodes = _0x4bdcdb;
            let _0x2b77e5 = -0x1;
            for (let _0x4bc157 = 0x0; _0x4bc157 < episodes[_0x3ca470(0x1b3)]; _0x4bc157++) {
                const _0x15abfb = episodes[_0x4bc157];
                for (let _0xda5f16 = 0x0; _0xda5f16 < _0x15abfb['episodes'][_0x3ca470(0x1b3)]; _0xda5f16++) {
                    const _0x2d5eb3 = _0x15abfb[_0x3ca470(0x1d2)][_0xda5f16];
                    if (_0x2d5eb3?.['id'] === _0x48061 || _0x2d5eb3?.['url'] === _0x48061) {
                        _0x2b77e5 = _0x2d5eb3[_0x3ca470(0x1a7)] ?? _0x4bc157;
                        break;
                    }
                }
            }
            _0x2b77e5 != -0x1 && intro['end'] === 0x0 && fetch(api_server + _0x3ca470(0x1bd), {
                'method': _0x3ca470(0x1be),
                'body': JSON[_0x3ca470(0x1ce)]({
                    'id': _0x3368f3,
                    'episodeNumber': _0x2b77e5
                }),
                'headers': {
                    'Content-Type': 'application/json'
                }
            })[_0x3ca470(0x1c3)](async _0x2c1271 => {
                const _0x1596f2 = _0x3ca470,
                    _0x550630 = await _0x2c1271['json']();
                if (_0x550630[_0x1596f2(0x1d1)] === 0x1f4) {
                    console[_0x1596f2(0x1ae)](_0x1596f2(0x1b0));
                    return;
                }
                for (let _0x29c8e4 = 0x0; _0x29c8e4 < _0x550630[_0x1596f2(0x1b3)]; _0x29c8e4++) {
                    _0x550630[_0x29c8e4]['skipType'] === 'op' && (intro['start'] = _0x550630[_0x29c8e4]['interval'][_0x1596f2(0x1b9)], intro[_0x1596f2(0x1c7)] = _0x550630[_0x29c8e4][_0x1596f2(0x1c4)][_0x1596f2(0x1ba)]);
                }
            })[_0x3ca470(0x1c0)](_0x1214a0 => {
                handleError(_0x1214a0), console['log']('Unable\x20to\x20fetch\x20skip\x20times.');
            });
            const _0x258d67 = {
                'id': _0x3368f3
            };
            fetch(api_server + _0x3ca470(0x1b8), {
                'method': _0x3ca470(0x1be),
                'body': JSON[_0x3ca470(0x1ce)](_0x258d67),
                'headers': {
                    'Content-Type': _0x3ca470(0x1c2)
                }
            })['then'](async _0x2337da => {
                const _0x3d1204 = _0x3ca470,
                    _0x1d4d53 = await _0x2337da[_0x3d1204(0x1cc)]();
                info = _0x1d4d53;
                const _0x28ba1e = document['createElement'](_0x3d1204(0x1b4));
                _0x28ba1e['rel'] = _0x3d1204(0x1c6), _0x28ba1e[_0x3d1204(0x1d5)] = _0x3d1204(0x1cf), document[_0x3d1204(0x1cd)](_0x3d1204(0x1c5))['append'](_0x28ba1e), setTimeout(() => {
                    const _0x165f3b = _0x3d1204;
                    console[_0x165f3b(0x1ae)](_0x165f3b(0x1ad)), loadPlayer(), console['log'](_0x165f3b(0x1b2));
                }, 0x4b0);
            })[_0x3ca470(0x1c0)](_0x4bad2e => {
                handleError(_0x4bad2e);
            });
        });
    })['catch'](_0x2f9820 => {
        handleError(_0x2f9820);
    });
}